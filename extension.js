const vscode = require('vscode');

function makeSnippets(apiName, keywords, items) {
    for (let key in keywords) {
        const template = {
            label: key,
            insertText: new vscode.SnippetString(keywords[key]),
            kind: null,
            documentation: null,
            detail: ''
        }
        let urlWord = key.replace("chrome", "").replace(apiName, "");
        urlWord = urlWord[0].toLowerCase() + urlWord.replace(urlWord[0], "");
        if (key.indexOf("On") == -1) {
            template.kind = vscode.CompletionItemKind.Method;
            template.documentation = new vscode.MarkdownString("https://developer.chrome.com/docs/extensions/reference/" + apiName[0].toLowerCase() + apiName.replace(apiName[0], "") + "/#method-" + urlWord);
            items.push(template);
        } else {
            template.kind = vscode.CompletionItemKind.Event;
            template.documentation = new vscode.MarkdownString("https://developer.chrome.com/docs/extensions/reference/" + apiName[0].toLowerCase() + apiName.replace(apiName[0], "") + "/#event-" + urlWord);
            items.push(template);
        }
    }
}

class JsCompletionItemProvider {
    constructor() {
        this.completionItems = [];
        const keywordsOfRuntime = { chromeRuntimeConnect: "chrome.runtime.connect(${1:extensionId}, ${2:connectInfo});", chromeRuntimeConnectNative: "chrome.runtime.connectNative(${1:application});", chromeRuntimeGetBackgroundPage: "chrome.runtime.getBackgroundPage(function (${1:backgroundPage}) {\n\t$2\n});", chromeRuntimeGetManifest: "chrome.runtime.getManifest();", chromeRuntimeGetPackageDirectoryEntry: "chrome.runtime.getPackageDirectoryEntry(function (${1:directoryEntry}) {\n\t$2\n});", chromeRuntimeGetPlatformInfo: "chrome.runtime.getPlatformInfo(function (${1:platformInfo}) {\n\t$2\n});", chromeRuntimeGetURL: "chrome.runtime.getURL(${1:path});", chromeRuntimeOpenOptionsPage: "chrome.runtime.openOptionsPage(function () {});", chromeRuntimeReload: "chrome.runtime.reload();", chromeRuntimeRequestUpdateCheck: "chrome.runtime.requestUpdateCheck(function (${1:result}) {\n\t$2\n});", chromeRuntimeRestart: "chrome.runtime.restart();", chromeRuntimeRestartAfterDelay: "chrome.runtime.restartAfterDelay(${1:seconds}, function () {});", chromeRuntimeSendMessage: "chrome.runtime.sendMessage(${1:extensionId}, ${2:message}, ${3:options}, function (${4:response}) {\n\t$5\n});", chromeRuntimeSendNativeMessage: "chrome.runtime.sendNativeMessage(${1:application}, ${2:message}, function (${3:response}) {\n\t$4\n});", chromeRuntimeSetUninstallURL: "chrome.runtime.setUninstallURL(${1:url}, function () {});", chromeRuntimeOnBrowserUpdateAvailable: "chrome.runtime.onBrowserUpdateAvailable.addListener(function () {});", chromeRuntimeOnConnect: "chrome.runtime.onConnect.addListener(function (${1:port}) {\n\t$2\n});", chromeRuntimeOnConnectExternal: "chrome.runtime.onConnectExternal.addListener(function (${1:port}) {\n\t$2\n});", chromeRuntimeOnConnectNative: "chrome.runtime.onConnectNative.addListener(function (${1:port}) {\n\t$2\n});", chromeRuntimeOnInstalled: "chrome.runtime.onInstalled.addListener(function (${1:details}) {\n\t$2\n});", chromeRuntimeOnMessage: "chrome.runtime.onMessage.addListener(function () {});", chromeRuntimeOnMessageExternal: "chrome.runtime.onMessageExternal.addListener(function () {});", chromeRuntimeOnRestartRequired: "chrome.runtime.onRestartRequired.addListener(function (${1:reason}) {\n\t$2\n});", chromeRuntimeOnStartup: "chrome.runtime.onStartup.addListener(function () {});", chromeRuntimeOnSuspend: "chrome.runtime.onSuspend.addListener(function () {});", chromeRuntimeOnSuspendCanceled: "chrome.runtime.onSuspendCanceled.addListener(function () {});", chromeRuntimeOnUpdateAvailable: "chrome.runtime.onUpdateAvailable.addListener(function (${1:details}) {\n\t$2\n});" };
        const keywordsOfStorage = { chromeStorageLocalSet: "chrome.storage.local.set({$1}, function () {});", chromeStorageSyncSet: "chrome.storage.sync.set({$1}, function () {});", chromeStorageLocalGet: "chrome.storage.local.get([$1], function (${2:result}) {\n\t$3\n});", chromeStorageSyncGet: "chrome.storage.sync.get([$1], function (${2:result}) {\n\t$3\n});" };;
        const keywordsOfBrowserAction = { chromeBrowserActionDisable: "chrome.browserAction.disable(${1:tabId}, function () {});", chromeBrowserActionEnable: "chrome.browserAction.enable(${1:tabId}, function () {});", chromeBrowserActionGetBadgeBackgroundColor: "chrome.browserAction.getBadgeBackgroundColor(${1:details}, function (${2:result}) {\n\t$3\n});", chromeBrowserActionGetBadgeText: "chrome.browserAction.getBadgeText(${1:details}, function (${2:result}) {\n\t$3\n});", chromeBrowserActionGetPopup: "chrome.browserAction.getPopup(${1:details}, function (${2:result}) {\n\t$3\n});", chromeBrowserActionGetTitle: "chrome.browserAction.getTitle(${1:details}, function (${2:result}) {\n\t$3\n});", chromeBrowserActionSetBadgeBackgroundColor: "chrome.browserAction.setBadgeBackgroundColor(${1:details}, function () {});", chromeBrowserActionSetBadgeText: "chrome.browserAction.setBadgeText(${1:details}, function () {});", chromeBrowserActionSetIcon: "chrome.browserAction.setIcon(${1:details}, function () {});", chromeBrowserActionSetPopup: "chrome.browserAction.setPopup(${1:details}, function () {});", chromeBrowserActionSetTitle: "chrome.browserAction.setTitle(${1:details}, function () {});", chromeBrowserActionOnClicked: "chrome.browserAction.onClicked.addListener(function (${1:tab}) {\n\t$2\n});" };
        const keywordsOfContextMenus = { chromeContextMenusOnClicked: "chrome.contextMenus.onClicked.addListener(function (${1:info}, ${2:tab}) {\n\t$3\n});", chromeContextMenusUpdate: "chrome.contextMenus.update(${1:id}, ${2:updateProperties}, function () {});", chromeContextMenusRemoveAll: "chrome.contextMenus.removeAll(function () {});", chromeContextMenusRemove: "chrome.contextMenus.remove(${1:menuItemId}, function () {});", chromeContextMenusCreate: "chrome.contextMenus.create(${1:createProperties}, function () {});",  };
        const keywordsOfTabs = { chromeTabsCaptureVisibleTab: "chrome.tabs.captureVisibleTab(${1:windowId}, ${2:options}, function (${3:dataUrl}) {\n\t$4\n});", chromeTabsConnect: "chrome.tabs.connect(${1:tabId}, ${2:connectInfo});", chromeTabsCreate: "chrome.tabs.create(${1:createProperties}, function (${2:tab}) {\n\t$3\n});", chromeTabsDetectLanguage: "chrome.tabs.detectLanguage(${1:tabId}, function (${2:language}) {\n\t$3\n});", chromeTabsDiscard: "chrome.tabs.discard(${1:tabId}, function (${2:tab}) {\n\t$3\n});", chromeTabsDuplicate: "chrome.tabs.duplicate(${1:tabId}, function (${2:tab}) {\n\t$3\n});", chromeTabsExecuteScript: "chrome.tabs.executeScript(${1:tabId}, ${2:details}, function (${3:result}) {\n\t$4\n});", chromeTabsGet: "chrome.tabs.get(${1:tabId}, function (${2:tab}) {\n\t$3\n});", chromeTabsGetAllInWindow: "chrome.tabs.getAllInWindow(${1:windowId}, function (${2:tabs}) {\n\t$3\n});", chromeTabsGetCurrent: "chrome.tabs.getCurrent(function (${1:tab}) {\n\t$2\n});", chromeTabsGetSelected: "chrome.tabs.getSelected(${1:windowId}, function (${2:tab}) {\n\t$3\n});", chromeTabsGetZoom: "chrome.tabs.getZoom(${1:tabId}, function (${2:zoomFactor}) {\n\t$3\n});", chromeTabsGetZoomSettings: "chrome.tabs.getZoomSettings(${1:tabId}, function (${2:zoomSettings}) {\n\t$3\n});", chromeTabsGoBack: "chrome.tabs.goBack(${1:tabId}, function () {});", chromeTabsGoForward: "chrome.tabs.goForward(${1:tabId}, function () {});", chromeTabsGroup: "chrome.tabs.group(${1:options}, function (${2:groupId}) {\n\t$3\n});", chromeTabsHighlight: "chrome.tabs.highlight(${1:highlightInfo}, function (${2:window}) {\n\t$3\n});", chromeTabsInsertCSS: "chrome.tabs.insertCSS(${1:tabId}, ${2:details}, function () {});", chromeTabsMove: "chrome.tabs.move(${1:tabIds}, ${2:moveProperties}, function (${3:tabs}) {\n\t$4\n});", chromeTabsQuery: "chrome.tabs.query(${1:queryInfo}, function (${2:result}) {\n\t$3\n});", chromeTabsReload: "chrome.tabs.reload(${1:tabId}, ${2:reloadProperties}, function () {});", chromeTabsRemove: "chrome.tabs.remove(${1:tabIds}, function () {});", chromeTabsRemoveCSS: "chrome.tabs.removeCSS(${1:tabId}, ${2:details}, function () {});", chromeTabsSendMessage: "chrome.tabs.sendMessage(${1:tabId}, ${2:message}, ${3:options}, function (${4:response}) {\n\t$5\n});", chromeTabsSendRequest: "chrome.tabs.sendRequest(${1:tabId}, ${2:request}, function (${3:response}) {\n\t$4\n});", chromeTabsSetZoom: "chrome.tabs.setZoom(${1:tabId}, ${2:zoomFactor}, function () {});", chromeTabsSetZoomSettings: "chrome.tabs.setZoomSettings(${1:tabId}, ${2:zoomSettings}, function () {});", chromeTabsUngroup: "chrome.tabs.ungroup(${1:tabIds}, function () {});", chromeTabsUpdate: "chrome.tabs.update(${1:tabId}, ${2:updateProperties}, function (${3:tab}) {\n\t$4\n});", chromeTabsOnActivated: "chrome.tabs.onActivated.addListener(function (${1:activeInfo}) {\n\t$2\n});", chromeTabsOnActiveChanged: "chrome.tabs.onActiveChanged.addListener(function (${1:tabId}, ${2:selectInfo}) {\n\t$3\n});", chromeTabsOnAttached: "chrome.tabs.onAttached.addListener(function (${1:tabId}, ${2:attachInfo}) {\n\t$3\n});", chromeTabsOnCreated: "chrome.tabs.onCreated.addListener(function (${1:tab}) {\n\t$2\n});", chromeTabsOnDetached: "chrome.tabs.onDetached.addListener(function (${1:tabId}, ${2:detachInfo}) {\n\t$3\n});", chromeTabsOnHighlightChanged: "chrome.tabs.onHighlightChanged.addListener(function (${1:selectInfo}) {\n\t$2\n});", chromeTabsOnHighlighted: "chrome.tabs.onHighlighted.addListener(function (${1:highlightInfo}) {\n\t$2\n});", chromeTabsOnMoved: "chrome.tabs.onMoved.addListener(function (${1:tabId}, ${2:moveInfo}) {\n\t$3\n});", chromeTabsOnRemoved: "chrome.tabs.onRemoved.addListener(function (${1:tabId}, ${2:removeInfo}) {\n\t$3\n});", chromeTabsOnReplaced: "chrome.tabs.onReplaced.addListener(function (${1:addedTabId}, ${2:removedTabId}) {\n\t$3\n});", chromeTabsOnSelectionChanged: "chrome.tabs.onSelectionChanged.addListener(function (${1:tabId}, ${2:selectInfo}) {\n\t$3\n});", chromeTabsOnUpdated: "chrome.tabs.onUpdated.addListener(function (${1:tabId}, ${2:changeInfo}, ${3:tab}) {\n\t$4\n});", chromeTabsOnZoomChange: "chrome.tabs.onZoomChange.addListener(function (${1:ZoomChangeInfo}) {\n\t$2\n});" };
        const keywordsOfAction = { chromeActionDisable: "chrome.action.disable(${1:tabId}, function () {});", chromeActionEnable: "chrome.action.enable(${1:tabId}, function () {});", chromeActionGetBadgeBackgroundColor: "chrome.action.getBadgeBackgroundColor(${1:details}, function (${2:result}) {\n\t$3\n});", chromeActionGetBadgeText: "chrome.action.getBadgeText(${1:details}, function (${2:result}) {\n\t$3\n});", chromeActionGetBadgeTextColor: "chrome.action.getBadgeTextColor(${1:details}, function (${2:result}) {\n\t$3\n});", chromeActionGetPopup: "chrome.action.getPopup(${1:details}, function (${2:result}) {\n\t$3\n});", chromeActionGetTitle: "chrome.action.getTitle(${1:details}, function (${2:result}) {\n\t$3\n});", chromeActionGetUserSettings: "chrome.action.getUserSettings(function (${1:userSettings}) {\n\t$2\n});", chromeActionIsEnabled: "chrome.action.isEnabled(${1:tabId}, function (${2:isEnabled}) {\n\t$3\n});", chromeActionOpenPopup: "chrome.action.openPopup(${1:options}, function () {});", chromeActionSetBadgeBackgroundColor: "chrome.action.setBadgeBackgroundColor(${1:details}, function () {});", chromeActionSetBadgeText: "chrome.action.setBadgeText(${1:details}, function () {});", chromeActionSetBadgeTextColor: "chrome.action.setBadgeTextColor(${1:details}, function () {});", chromeActionSetIcon: "chrome.action.setIcon(${1:details}, function () {});", chromeActionSetPopup: "chrome.action.setPopup(${1:details}, function () {});", chromeActionSetTitle: "chrome.action.setTitle(${1:details}, function () {});", chromeActionOnClicked: "chrome.action.onClicked.addListener(function (${1:tab}) {\n\t$2\n});" };
        const keywordsOfHistory = { chromeHistoryAddUrl: "chrome.history.addUrl(${1:details}, function () {});", chromeHistoryDeleteAll: "chrome.history.deleteAll(function () {});", chromeHistoryDeleteRange: "chrome.history.deleteRange(${1:range}, function () {});", chromeHistoryDeleteUrl: "chrome.history.deleteUrl(${1:details}, function () {});", chromeHistoryGetVisits: "chrome.history.getVisits(${1:details}, function (${2:results}) {\n\t$3\n});", chromeHistorySearch: "chrome.history.search(${1:query}, function (${2:results}) {\n\t$3\n});", chromeHistoryOnVisited: "chrome.history.onVisited.addListener(function (${1:result}) {\n\t$2\n});", chromeHistoryOnVisitRemoved: "chrome.history.onVisitRemoved.addListener(function (${1:removed}) {\n\t$2\n});" };
        const keywordsOfNotifications = { chromeNotificationsClear: "chrome.notifications.clear(${1:notificationId}, function (${2:wasCleared}) {\n\t$3\n});", chromeNotificationsCreate: "chrome.notifications.create(${1:notificationId}, ${2:options}, function (${3:notificationId}) {\n\t$4\n});", chromeNotificationsGetAll: "chrome.notifications.getAll(function (${1:notifications}) {\n\t$2\n});", chromeNotificationsGetPermissionLevel: "chrome.notifications.getPermissionLevel(function (${1:level}) {\n\t$2\n});", chromeNotificationsUpdate: "chrome.notifications.update(${1:notificationId}, ${2:options}, function (${3:wasUpdated}) {\n\t$4\n});", chromeNotificationsOnButtonClicked: "chrome.notifications.onButtonClicked.addListener(function (${1:notificationId}, ${2:buttonIndex}) {\n\t$3\n});", chromeNotificationsOnClicked: "chrome.notifications.onClicked.addListener(function (${1:notificationId}) {\n\t$2\n});", chromeNotificationsOnClosed: "chrome.notifications.onClosed.addListener(function (${1:notificationId}, ${2:byUser}) {\n\t$3\n});", chromeNotificationsOnPermissionLevelChanged: "chrome.notifications.onPermissionLevelChanged.addListener(function (${1:level}) {\n\t$2\n});", chromeNotificationsOnShowSettings: "chrome.notifications.onShowSettings.addListener(function () {});" };
        const keywordsOfPageAction = { chromePageActionGetPopup: "chrome.pageAction.getPopup(${1:details}, function (${2:result}) {\n\t$3\n});", chromePageActionGetTitle: "chrome.pageAction.getTitle(${1:details}, function (${2:result}) {\n\t$3\n});", chromePageActionHide: "chrome.pageAction.hide(${1:tabId}, function () {});", chromePageActionSetIcon: "chrome.pageAction.setIcon(${1:details}, function () {});", chromePageActionSetPopup: "chrome.pageAction.setPopup(${1:details}, function () {});", chromePageActionSetTitle: "chrome.pageAction.setTitle(${1:details}, function () {});", chromePageActionShow: "chrome.pageAction.show(${1:tabId}, function () {});", chromePageActionOnClicked: "chrome.pageAction.onClicked.addListener(function (${1:tab}) {\n\t$2\n});" };
        const keywordsOfScripting = { chromeScriptingExecuteScript: "chrome.scripting.executeScript(${1:injection}, function (${2:results}) {\n\t$3\n});", chromeScriptingGetRegisteredContentScripts: "chrome.scripting.getRegisteredContentScripts(${1:filter}, function (${2:scripts}) {\n\t$3\n});", chromeScriptingInsertCSS: "chrome.scripting.insertCSS(${1:injection}, function () {});", chromeScriptingRegisterContentScripts: "chrome.scripting.registerContentScripts(${1:scripts}, function () {});", chromeScriptingRemoveCSS: "chrome.scripting.removeCSS(${1:injection}, function () {});", chromeScriptingUnregisterContentScripts: "chrome.scripting.unregisterContentScripts(${1:filter}, function () {});", chromeScriptingUpdateContentScripts: "chrome.scripting.updateContentScripts(${1:scripts}, function () {});" };
        const keywordsOfBookmarks = { chromeBookmarksCreate: "chrome.bookmarks.create(${1:bookmark}, function (${2:result}) {\n\t$3\n});", chromeBookmarksGet: "chrome.bookmarks.get(${1:idOrIdList}, function (${2:results}) {\n\t$3\n});", chromeBookmarksGetChildren: "chrome.bookmarks.getChildren(${1:id}, function (${2:results}) {\n\t$3\n});", chromeBookmarksGetRecent: "chrome.bookmarks.getRecent(${1:numberOfItems}, function (${2:results}) {\n\t$3\n});", chromeBookmarksGetSubTree: "chrome.bookmarks.getSubTree(${1:id}, function (${2:results}) {\n\t$3\n});", chromeBookmarksGetTree: "chrome.bookmarks.getTree(function (${1:results}) {\n\t$2\n});", chromeBookmarksMove: "chrome.bookmarks.move(${1:id}, ${2:destination}, function (${3:result}) {\n\t$4\n});", chromeBookmarksRemove: "chrome.bookmarks.remove(${1:id}, function () {});", chromeBookmarksRemoveTree: "chrome.bookmarks.removeTree(${1:id}, function () {});", chromeBookmarksSearch: "chrome.bookmarks.search(${1:query}, function (${2:results}) {\n\t$3\n});", chromeBookmarksUpdate: "chrome.bookmarks.update(${1:id}, ${2:changes}, function (${3:result}) {\n\t$4\n});", chromeBookmarksOnChanged: "chrome.bookmarks.onChanged.addListener(function (${1:id}, ${2:changeInfo}) {\n\t$3\n});", chromeBookmarksOnChildrenReordered: "chrome.bookmarks.onChildrenReordered.addListener(function (${1:id}, ${2:reorderInfo}) {\n\t$3\n});", chromeBookmarksOnCreated: "chrome.bookmarks.onCreated.addListener(function (${1:id}, ${2:bookmark}) {\n\t$3\n});", chromeBookmarksOnImportBegan: "chrome.bookmarks.onImportBegan.addListener(function () {});", chromeBookmarksOnImportEnded: "chrome.bookmarks.onImportEnded.addListener(function () {});", chromeBookmarksOnMoved: "chrome.bookmarks.onMoved.addListener(function (${1:id}, ${2:moveInfo}) {\n\t$3\n});", chromeBookmarksOnRemoved: "chrome.bookmarks.onRemoved.addListener(function (${1:id}, ${2:removeInfo}) {\n\t$3\n});" };
        const keywordsOfCommands = { chromeCommandsGetAll: "chrome.commands.getAll(function (${1:commands}) {\n\t$2\n});", chromeCommandsOnCommand: "chrome.commands.onCommand.addListener(function (${1:command}, ${2:tab}) {\n\t$3\n});" };
        const keywordsOfCookies = { chromeCookiesGet: "chrome.cookies.get(${1:details}, function (${2:cookie}) {\n\t$3\n});", chromeCookiesGetAll: "chrome.cookies.getAll(${1:details}, function (${2:cookies}) {\n\t$3\n});", chromeCookiesGetAllCookieStores: "chrome.cookies.getAllCookieStores(function (${1:cookieStores}) {\n\t$2\n});", chromeCookiesRemove: "chrome.cookies.remove(${1:details}, function (${2:details}) {\n\t$3\n});", chromeCookiesSet: "chrome.cookies.set(${1:details}, function (${2:cookie}) {\n\t$3\n});", chromeCookiesOnChanged: "chrome.cookies.onChanged.addListener(function (${1:changeInfo}) {\n\t$2\n});" };
        const keywordsOfDebugger = { chromeDebuggerAttach: "chrome.debugger.attach(${1:target}, ${2:requiredVersion}, function () {});", chromeDebuggerDetach: "chrome.debugger.detach(${1:target}, function () {});", chromeDebuggerGetTargets: "chrome.debugger.getTargets(function (${1:result}) {\n\t$2\n});", chromeDebuggerSendCommand: "chrome.debugger.sendCommand(${1:target}, ${2:method}, ${3:commandParams}, function (${4:result}) {\n\t$5\n});", chromeDebuggerOnDetach: "chrome.debugger.onDetach.addListener(function (${1:source}, ${2:reason}) {\n\t$3\n});", chromeDebuggerOnEvent: "chrome.debugger.onEvent.addListener(function (${1:source}, ${2:method}, ${3:params}) {\n\t$4\n});" };
        const keywordsOfSessions = { chromeSessionsGetDevices: "chrome.sessions.getDevices(${1:filter}, function (${2:devices}) {\n\t$3\n});", chromeSessionsGetRecentlyClosed: "chrome.sessions.getRecentlyClosed(${1:filter}, function (${2:sessions}) {\n\t$3\n});", chromeSessionsRestore: "chrome.sessions.restore(${1:sessionId}, function (${2:restoredSession}) {\n\t$3\n});", chromeSessionsOnChanged: "chrome.sessions.onChanged.addListener(function () {});" };
        const keywordsOfDesktopCapture = { chromeDesktopCaptureCancelChooseDesktopMedia: "chrome.desktopCapture.cancelChooseDesktopMedia(${1:desktopMediaRequestId});", chromeDesktopCaptureChooseDesktopMedia: "chrome.desktopCapture.chooseDesktopMedia(${1:sources}, ${2:targetTab}, function (${3:streamId}, ${4:options}) {\n\t$5\n});" };
        const keywordsOfBrowsingData = { chromeBrowsingDataRemove: "chrome.browsingData.remove(${1:options}, ${2:dataToRemove}, function () {});", chromeBrowsingDataRemoveAppcache: "chrome.browsingData.removeAppcache(${1:options}, function () {});", chromeBrowsingDataRemoveCache: "chrome.browsingData.removeCache(${1:options}, function () {});", chromeBrowsingDataRemoveCacheStorage: "chrome.browsingData.removeCacheStorage(${1:options}, function () {});", chromeBrowsingDataRemoveCookies: "chrome.browsingData.removeCookies(${1:options}, function () {});", chromeBrowsingDataRemoveDownloads: "chrome.browsingData.removeDownloads(${1:options}, function () {});", chromeBrowsingDataRemoveFileSystems: "chrome.browsingData.removeFileSystems(${1:options}, function () {});", chromeBrowsingDataRemoveFormData: "chrome.browsingData.removeFormData(${1:options}, function () {});", chromeBrowsingDataRemoveHistory: "chrome.browsingData.removeHistory(${1:options}, function () {});", chromeBrowsingDataRemoveIndexedDB: "chrome.browsingData.removeIndexedDB(${1:options}, function () {});", chromeBrowsingDataRemoveLocalStorage: "chrome.browsingData.removeLocalStorage(${1:options}, function () {});", chromeBrowsingDataRemovePasswords: "chrome.browsingData.removePasswords(${1:options}, function () {});", chromeBrowsingDataRemovePluginData: "chrome.browsingData.removePluginData(${1:options}, function () {});", chromeBrowsingDataRemoveServiceWorkers: "chrome.browsingData.removeServiceWorkers(${1:options}, function () {});", chromeBrowsingDataRemoveWebSQL: "chrome.browsingData.removeWebSQL(${1:options}, function () {});", chromeBrowsingDataSettings: "chrome.browsingData.settings(function (${1:result}) {\n\t$2\n});" };
        const keywordsOfCertificateProvider = { chromeCertificateProviderReportSignature: "chrome.certificateProvider.reportSignature(${1:details}, function () {});", chromeCertificateProviderRequestPin: "chrome.certificateProvider.requestPin(${1:details}, function (${2:details}) {\n\t$3\n});", chromeCertificateProviderSetCertificates: "chrome.certificateProvider.setCertificates(${1:details}, function () {});", chromeCertificateProviderStopPinRequest: "chrome.certificateProvider.stopPinRequest(${1:details}, function () {});", chromeCertificateProviderOnCertificatesRequested: "chrome.certificateProvider.onCertificatesRequested.addListener(function (${1:reportCallback}) {\n\t$2\n});", chromeCertificateProviderOnCertificatesUpdateRequested: "chrome.certificateProvider.onCertificatesUpdateRequested.addListener(function (${1:request}) {\n\t$2\n});", chromeCertificateProviderOnSignatureRequested: "chrome.certificateProvider.onSignatureRequested.addListener(function (${1:request}) {\n\t$2\n});", chromeCertificateProviderOnSignDigestRequested: "chrome.certificateProvider.onSignDigestRequested.addListener(function (${1:request}, ${2:reportCallback}) {\n\t$3\n});" };
        const keywordsOfAlarms = { chromeAlarmsClear: "chrome.alarms.clear(${1:name}, function (${2:wasCleared}) {\n\t$3\n});", chromeAlarmsClearAll: "chrome.alarms.clearAll(function (${1:wasCleared}) {\n\t$2\n});", chromeAlarmsCreate: "chrome.alarms.create(${1:name}, ${2:alarmInfo});", chromeAlarmsGet: "chrome.alarms.get(${1:name}, function (${2:alarm}) {\n\t$3\n});", chromeAlarmsGetAll: "chrome.alarms.getAll(function (${1:alarms}) {\n\t$2\n});", chromeAlarmsOnAlarm: "chrome.alarms.onAlarm.addListener(function (${1:alarm}) {\n\t$2\n});" };
        const keywordsOfAudio = { chromeAudioGetDevices: "chrome.audio.getDevices(${1:filter}, function (${2:devices}) {\n\t$3\n});", chromeAudioGetMute: "chrome.audio.getMute(${1:streamType}, function (${2:value}) {\n\t$3\n});", chromeAudioSetActiveDevices: "chrome.audio.setActiveDevices(${1:ids}, function () {});", chromeAudioSetMute: "chrome.audio.setMute(${1:streamType}, ${2:isMuted}, function () {});", chromeAudioSetProperties: "chrome.audio.setProperties(${1:id}, ${2:properties}, function () {});", chromeAudioOnDeviceListChanged: "chrome.audio.onDeviceListChanged.addListener(function (${1:devices}) {\n\t$2\n});", chromeAudioOnLevelChanged: "chrome.audio.onLevelChanged.addListener(function (${1:event}) {\n\t$2\n});", chromeAudioOnMuteChanged: "chrome.audio.onMuteChanged.addListener(function (${1:event}) {\n\t$2\n});" };
        const keywordsOfDownloads = { chromeDownloadsAcceptDanger: "chrome.downloads.acceptDanger(${1:downloadId}, function () {});", chromeDownloadsCancel: "chrome.downloads.cancel(${1:downloadId}, function () {});", chromeDownloadsDownload: "chrome.downloads.download(${1:options}, function (${2:downloadId}) {\n\t$3\n});", chromeDownloadsErase: "chrome.downloads.erase(${1:query}, function (${2:erasedIds}) {\n\t$3\n});", chromeDownloadsGetFileIcon: "chrome.downloads.getFileIcon(${1:downloadId}, ${2:options}, function (${3:iconURL}) {\n\t$4\n});", chromeDownloadsOpen: "chrome.downloads.open(${1:downloadId});", chromeDownloadsPause: "chrome.downloads.pause(${1:downloadId}, function () {});", chromeDownloadsRemoveFile: "chrome.downloads.removeFile(${1:downloadId}, function () {});", chromeDownloadsResume: "chrome.downloads.resume(${1:downloadId}, function () {});", chromeDownloadsSearch: "chrome.downloads.search(${1:query}, function (${2:results}) {\n\t$3\n});", chromeDownloadsSetShelfEnabled: "chrome.downloads.setShelfEnabled(${1:enabled});", chromeDownloadsSetUiOptions: "chrome.downloads.setUiOptions(${1:options}, function () {});", chromeDownloadsShow: "chrome.downloads.show(${1:downloadId});", chromeDownloadsShowDefaultFolder: "chrome.downloads.showDefaultFolder();", chromeDownloadsOnChanged: "chrome.downloads.onChanged.addListener(function (${1:downloadDelta}) {\n\t$2\n});", chromeDownloadsOnCreated: "chrome.downloads.onCreated.addListener(function (${1:downloadItem}) {\n\t$2\n});", chromeDownloadsOnDeterminingFilename: "chrome.downloads.onDeterminingFilename.addListener(function (${1:downloadItem}, ${2:suggest}) {\n\t$3\n});", chromeDownloadsOnErased: "chrome.downloads.onErased.addListener(function (${1:downloadId}) {\n\t$2\n});" };
        const keywordsOfExtension = { chromeExtensionGetBackgroundPage: "chrome.extension.getBackgroundPage();", chromeExtensionGetExtensionTabs: "chrome.extension.getExtensionTabs(${1:windowId});", chromeExtensionGetURL: "chrome.extension.getURL(${1:path});", chromeExtensionGetViews: "chrome.extension.getViews(${1:fetchProperties});", chromeExtensionIsAllowedFileSchemeAccess: "chrome.extension.isAllowedFileSchemeAccess(function (${1:isAllowedAccess}) {\n\t$2\n});", chromeExtensionIsAllowedIncognitoAccess: "chrome.extension.isAllowedIncognitoAccess(function (${1:isAllowedAccess}) {\n\t$2\n});", chromeExtensionSendRequest: "chrome.extension.sendRequest(${1:extensionId}, ${2:request}, function (${3:response}) {\n\t$4\n});", chromeExtensionSetUpdateUrlData: "chrome.extension.setUpdateUrlData(${1:data});", chromeExtensionOnRequest: "chrome.extension.onRequest.addListener(function (${1:request}, ${2:sender}, ${3:sendResponse}) {\n\t$4\n});", chromeExtensionOnRequestExternal: "chrome.extension.onRequestExternal.addListener(function (${1:request}, ${2:sender}, ${3:sendResponse}) {\n\t$4\n});" };
        const keywordsOfIdentity = { chromeIdentityClearAllCachedAuthTokens: "chrome.identity.clearAllCachedAuthTokens(function () {});", chromeIdentityGetAccounts: "chrome.identity.getAccounts(function (${1:accounts}) {\n\t$2\n});", chromeIdentityGetAuthToken: "chrome.identity.getAuthToken(${1:details}, function (${2:result}) {\n\t$3\n});", chromeIdentityGetProfileUserInfo: "chrome.identity.getProfileUserInfo(${1:details}, function (${2:userInfo}) {\n\t$3\n});", chromeIdentityGetRedirectURL: "chrome.identity.getRedirectURL(${1:path});", chromeIdentityLaunchWebAuthFlow: "chrome.identity.launchWebAuthFlow(${1:details}, function (${2:responseUrl}) {\n\t$3\n});", chromeIdentityRemoveCachedAuthToken: "chrome.identity.removeCachedAuthToken(${1:details}, function () {});", chromeIdentityOnSignInChanged: "chrome.identity.onSignInChanged.addListener(function (${1:account}, ${2:signedIn}) {\n\t$3\n});" };
        const keywordsOfDevetoolsNetworks = { chromeDevtoolsNetworkGetHAR: "chrome.devtools.network.getHAR(function (${1:harLog}) {\n\t$2\n});", chromeDevtoolsNetworkOnNavigated: "chrome.devtools.network.onNavigated.addListener(function (${1:url}) {\n\t$2\n});", chromeDevtoolsNetworkOnRequestFinished: "chrome.devtools.network.onRequestFinished.addListener(function (${1:request}) {\n\t$2\n});" };
        const keywordsOfDeclarativeNetRequest = { chromeDeclarativeNetRequestGetAvailableStaticRuleCount: "chrome.declarativeNetRequest.getAvailableStaticRuleCount(function (${1:count}) {\n\t$2\n});", chromeDeclarativeNetRequestGetDynamicRules: "chrome.declarativeNetRequest.getDynamicRules(function (${1:rules}) {\n\t$2\n});", chromeDeclarativeNetRequestGetEnabledRulesets: "chrome.declarativeNetRequest.getEnabledRulesets(function (${1:rulesetIds}) {\n\t$2\n});", chromeDeclarativeNetRequestGetMatchedRules: "chrome.declarativeNetRequest.getMatchedRules(${1:filter}, function (${2:details}) {\n\t$3\n});", chromeDeclarativeNetRequestGetSessionRules: "chrome.declarativeNetRequest.getSessionRules(function (${1:rules}) {\n\t$2\n});", chromeDeclarativeNetRequestIsRegexSupported: "chrome.declarativeNetRequest.isRegexSupported(${1:regexOptions}, function (${2:result}) {\n\t$3\n});", chromeDeclarativeNetRequestSetExtensionActionOptions: "chrome.declarativeNetRequest.setExtensionActionOptions(${1:options}, function () {});", chromeDeclarativeNetRequestTestMatchOutcome: "chrome.declarativeNetRequest.testMatchOutcome(${1:request}, function (${2:result}) {\n\t$3\n});", chromeDeclarativeNetRequestUpdateDynamicRules: "chrome.declarativeNetRequest.updateDynamicRules(${1:options}, function () {});", chromeDeclarativeNetRequestUpdateEnabledRulesets: "chrome.declarativeNetRequest.updateEnabledRulesets(${1:options}, function () {});", chromeDeclarativeNetRequestUpdateSessionRules: "chrome.declarativeNetRequest.updateSessionRules(${1:options}, function () {});", chromeDeclarativeNetRequestOnRuleMatchedDebug: "chrome.declarativeNetRequest.onRuleMatchedDebug.addListener(function (${1:info}) {\n\t$2\n});" };
        const keywordsOfDevtoolsInspectedWindow = { chromeDevtoolsInspectedWindowEval: "chrome.devtools.inspectedWindow.eval(${1:expression}, ${2:options}, function (${3:result}, ${4:exceptionInfo}) {\n\t$5\n});", chromeDevtoolsInspectedWindowGetResources: "chrome.devtools.inspectedWindow.getResources(function (${1:resources}) {\n\t$2\n});", chromeDevtoolsInspectedWindowReload: "chrome.devtools.inspectedWindow.reload(${1:reloadOptions});", chromeDevtoolsInspectedWindowOnResourceAdded: "chrome.devtools.inspectedWindow.onResourceAdded.addListener(function (${1:resource}) {\n\t$2\n});", chromeDevtoolsInspectedWindowOnResourceContentCommitted: "chrome.devtools.inspectedWindow.onResourceContentCommitted.addListener(function (${1:resource}, ${2:content}) {\n\t$3\n});" };
        const keywordsOfDevtoolsPanels = { chromeDevtoolsPanelsCreate: "chrome.devtools.panels.create(${1:title}, ${2:iconPath}, ${3:pagePath}, function (${4:panel}) {\n\t$5\n});", chromeDevtoolsPanelsOpenResource: "chrome.devtools.panels.openResource(${1:url}, ${2:lineNumber}, function () {});", chromeDevtoolsPanelsSetOpenResourceHandler: "chrome.devtools.panels.setOpenResourceHandler(function (${1:resource}) {\n\t$2\n});" };
        const keywordsOfDevetoolsRecorder = { chromeDevtoolsRecorderRegisterRecorderExtensionPlugin: "chrome.devtools.recorder.registerRecorderExtensionPlugin(${1:plugin}, ${2:name}, ${3:mediaType});" }
        const keywordsOfDeclartiveNetRequest = { chromeDeclarativeNetRequestGetAvailableStaticRuleCount: "chrome.declarativeNetRequest.getAvailableStaticRuleCount(function (${1:count}) {\n\t$2\n});", chromeDeclarativeNetRequestGetDynamicRules: "chrome.declarativeNetRequest.getDynamicRules(function (${1:rules}) {\n\t$2\n});", chromeDeclarativeNetRequestGetEnabledRulesets: "chrome.declarativeNetRequest.getEnabledRulesets(function (${1:rulesetIds}) {\n\t$2\n});", chromeDeclarativeNetRequestGetMatchedRules: "chrome.declarativeNetRequest.getMatchedRules(${1:filter}, function (${2:details}) {\n\t$3\n});", chromeDeclarativeNetRequestGetSessionRules: "chrome.declarativeNetRequest.getSessionRules(function (${1:rules}) {\n\t$2\n});", chromeDeclarativeNetRequestIsRegexSupported: "chrome.declarativeNetRequest.isRegexSupported(${1:regexOptions}, function (${2:result}) {\n\t$3\n});", chromeDeclarativeNetRequestSetExtensionActionOptions: "chrome.declarativeNetRequest.setExtensionActionOptions(${1:options}, function () {});", chromeDeclarativeNetRequestTestMatchOutcome: "chrome.declarativeNetRequest.testMatchOutcome(${1:request}, function (${2:result}) {\n\t$3\n});", chromeDeclarativeNetRequestUpdateDynamicRules: "chrome.declarativeNetRequest.updateDynamicRules(${1:options}, function () {});", chromeDeclarativeNetRequestUpdateEnabledRulesets: "chrome.declarativeNetRequest.updateEnabledRulesets(${1:options}, function () {});", chromeDeclarativeNetRequestUpdateSessionRules: "chrome.declarativeNetRequest.updateSessionRules(${1:options}, function () {});", chromeDeclarativeNetRequestOnRuleMatchedDebug: "chrome.declarativeNetRequest.onRuleMatchedDebug.addListener(function (${1:info}) {\n\t$2\n});" };
        const keywordsOfDocumentScan = { chromeDocumentScanScan: "chrome.documentScan.scan(${1:options}, function (${2:result}) {\n\t$3\n});" };
        const keywordsOfDom = { chromeDomOpenOrClosedShadowRoot: "chrome.dom.openOrClosedShadowRoot(${1:element});" };
        const keywordsOfEnterpriseDeviceAttributes = { chromeEnterpriseDeviceAttributesGetDeviceAnnotatedLocation: "chrome.enterprise.deviceAttributes.getDeviceAnnotatedLocation(function (${1:annotatedLocation}) {\n\t$2\n});", chromeEnterpriseDeviceAttributesGetDeviceAssetId: "chrome.enterprise.deviceAttributes.getDeviceAssetId(function (${1:assetId}) {\n\t$2\n});", chromeEnterpriseDeviceAttributesGetDeviceHostname: "chrome.enterprise.deviceAttributes.getDeviceHostname(function (${1:hostname}) {\n\t$2\n});", chromeEnterpriseDeviceAttributesGetDeviceSerialNumber: "chrome.enterprise.deviceAttributes.getDeviceSerialNumber(function (${1:serialNumber}) {\n\t$2\n});", chromeEnterpriseDeviceAttributesGetDirectoryDeviceId: "chrome.enterprise.deviceAttributes.getDirectoryDeviceId(function (${1:deviceId}) {\n\t$2\n});" };
        const keywordsOfEnterpriseHardwarePlatform = { chromeEnterpriseHardwarePlatformGetHardwarePlatformInfo: "chrome.enterprise.hardwarePlatform.getHardwarePlatformInfo(function (${1:info}) {\n\t$2\n});" };
        const keywordsOfEnterpriseNetworkingAttributes = { chromeEnterpriseNetworkingAttributesGetNetworkDetails: "chrome.enterprise.networkingAttributes.getNetworkDetails(function (${1:networkAddresses}) {\n\t$2\n});" };
        const keywordsOfEnterprisePlatformKeys = { chromeEnterprisePlatformKeysChallengeMachineKey: "chrome.enterprise.platformKeys.challengeMachineKey(${1:challenge}, ${2:registerKey}, function (${3:response}) {\n\t$4\n});", chromeEnterprisePlatformKeysChallengeUserKey: "chrome.enterprise.platformKeys.challengeUserKey(${1:challenge}, ${2:registerKey}, function (${3:response}) {\n\t$4\n});", chromeEnterprisePlatformKeysGetCertificates: "chrome.enterprise.platformKeys.getCertificates(${1:tokenId}, function (${2:certificates}) {\n\t$3\n});", chromeEnterprisePlatformKeysGetTokens: "chrome.enterprise.platformKeys.getTokens(function (${1:tokens}) {\n\t$2\n});", chromeEnterprisePlatformKeysImportCertificate: "chrome.enterprise.platformKeys.importCertificate(${1:tokenId}, ${2:certificate}, function () {});", chromeEnterprisePlatformKeysRemoveCertificate: "chrome.enterprise.platformKeys.removeCertificate(${1:tokenId}, ${2:certificate}, function () {});" };
        const keywordsOfPrinterProvider = { chromePrinterProviderOnGetCapabilityRequested: "chrome.printerProvider.onGetCapabilityRequested.addListener(function (${1:printerId}, ${2:resultCallback}) {\n\t$3\n});", chromePrinterProviderOnGetPrintersRequested: "chrome.printerProvider.onGetPrintersRequested.addListener(function (${1:resultCallback}) {\n\t$2\n});", chromePrinterProviderOnGetUsbPrinterInfoRequested: "chrome.printerProvider.onGetUsbPrinterInfoRequested.addListener(function (${1:device}, ${2:resultCallback}) {\n\t$3\n});", chromePrinterProviderOnPrintRequested: "chrome.printerProvider.onPrintRequested.addListener(function (${1:printJob}, ${2:resultCallback}) {\n\t$3\n});" };
        const keywordsOfPower = { chromePowerReleaseKeepAwake: "chrome.power.releaseKeepAwake();", chromePowerRequestKeepAwake: "chrome.power.requestKeepAwake(${1:level});" };
        const keywordsOfPlatformKeys = { chromePlatformKeysGetKeyPair: "chrome.platformKeys.getKeyPair(${1:certificate}, ${2:parameters}, function (${3:publicKey}, ${4:privateKey}) {\n\t$5\n});", chromePlatformKeysGetKeyPairBySpki: "chrome.platformKeys.getKeyPairBySpki(${1:publicKeySpkiDer}, ${2:parameters}, function (${3:publicKey}, ${4:privateKey}) {\n\t$5\n});", chromePlatformKeysSelectClientCertificates: "chrome.platformKeys.selectClientCertificates(${1:details}, function (${2:matches}) {\n\t$3\n});", chromePlatformKeysSubtleCrypto: "chrome.platformKeys.subtleCrypto();", chromePlatformKeysVerifyTLSServerCertificate: "chrome.platformKeys.verifyTLSServerCertificate(${1:details}, function (${2:result}) {\n\t$3\n});" };
        const keywordsOfpermissions = { chromepermissionsContains: "chrome.permissions.contains(${1:permissions}, function (${2:result}) {\n\t$3\n});", chromePermissionsGetAll: "chrome.permissions.getAll(function (${1:permissions}) {\n\t$2\n});", chromepermissionsRemove: "chrome.permissions.remove(${1:permissions}, function (${2:removed}) {\n\t$3\n});", chromepermissionsRequest: "chrome.permissions.request(${1:permissions}, function (${2:granted}) {\n\t$3\n});", chromePermissionsOnAdded: "chrome.permissions.onAdded.addListener(function (${1:permissions}) {\n\t$2\n});", chromePermissionsOnRemoved: "chrome.permissions.onRemoved.addListener(function (${1:permissions}) {\n\t$2\n});" };
        const keywordsOfPageCapture = { chromePageCaptureSaveAsMHTML: "chrome.pageCapture.saveAsMHTML(${1:details}, function (${2:mhtmlData}) {\n\t$3\n});" };
        const keywordsOfOmnibox = { chromeOmniboxSetDefaultSuggestion: "chrome.omnibox.setDefaultSuggestion(${1:suggestion}, function () {});", chromeOmniboxOnDeleteSuggestion: "chrome.omnibox.onDeleteSuggestion.addListener(function (${1:text}) {\n\t$2\n});", chromeOmniboxOnInputCancelled: "chrome.omnibox.onInputCancelled.addListener(function () {});", chromeOmniboxOnInputChanged: "chrome.omnibox.onInputChanged.addListener(function (${1:text}, ${2:suggest}) {\n\t$3\n});", chromeOmniboxOnInputEntered: "chrome.omnibox.onInputEntered.addListener(function (${1:text}, ${2:disposition}) {\n\t$3\n});", chromeOmniboxOnInputStarted: "chrome.omnibox.onInputStarted.addListener(function () {});" };
        const keywordsOfOffscreen = { chromeOffscreenCloseDocument: "chrome.offscreen.closeDocument(function () {});", chromeOffscreenCreateDocument: "chrome.offscreen.createDocument(${1:parameters}, function () {});" };
        const keywordsOfManagement = { chromeManagementCanInstallReplacementAndroidApp: "chrome.management.canInstallReplacementAndroidApp(function (${1:result}) {\n\t$2\n});", chromeManagementCreateAppShortcut: "chrome.management.createAppShortcut(${1:id}, function () {});", chromeManagementGenerateAppForLink: "chrome.management.generateAppForLink(${1:url}, ${2:title}, function (${3:result}) {\n\t$4\n});", chromeManagementGet: "chrome.management.get(${1:id}, function (${2:result}) {\n\t$3\n});", chromeManagementGetAll: "chrome.management.getAll(function (${1:result}) {\n\t$2\n});", chromeManagementGetPermissionWarningsById: "chrome.management.getPermissionWarningsById(${1:id}, function (${2:permissionWarnings}) {\n\t$3\n});", chromeManagementGetPermissionWarningsByManifest: "chrome.management.getPermissionWarningsByManifest(${1:manifestStr}, function (${2:permissionWarnings}) {\n\t$3\n});", chromeManagementGetSelf: "chrome.management.getSelf(function (${1:result}) {\n\t$2\n});", chromeManagementInstallReplacementAndroidApp: "chrome.management.installReplacementAndroidApp(function () {});", chromeManagementInstallReplacementWebApp: "chrome.management.installReplacementWebApp(function () {});", chromeManagementLaunchApp: "chrome.management.launchApp(${1:id}, function () {});", chromeManagementSetEnabled: "chrome.management.setEnabled(${1:id}, ${2:enabled}, function () {});", chromeManagementSetLaunchType: "chrome.management.setLaunchType(${1:id}, ${2:launchType}, function () {});", chromeManagementUninstall: "chrome.management.uninstall(${1:id}, ${2:options}, function () {});", chromeManagementUninstallSelf: "chrome.management.uninstallSelf(${1:options}, function () {});", chromeManagementOnDisabled: "chrome.management.onDisabled.addListener(function (${1:info}) {\n\t$2\n});", chromeManagementOnEnabled: "chrome.management.onEnabled.addListener(function (${1:info}) {\n\t$2\n});", chromeManagementOnInstalled: "chrome.management.onInstalled.addListener(function (${1:info}) {\n\t$2\n});", chromeManagementOnUninstalled: "chrome.management.onUninstalled.addListener(function (${1:id}) {\n\t$2\n});" };
        const keywordsOfLoginState = { chromeLoginStateGetProfileType: "chrome.loginState.getProfileType(function (${1:result}) {\n\t$2\n});", chromeLoginStateGetSessionState: "chrome.loginState.getSessionState(function (${1:result}) {\n\t$2\n});", chromeLoginStateOnSessionStateChanged: "chrome.loginState.onSessionStateChanged.addListener(function (${1:sessionState}) {\n\t$2\n});"};
        const keywordsOfInstanceID = { chromeInstanceIDDeleteID: "chrome.instanceID.deleteID(function () {});", chromeInstanceIDDeleteToken: "chrome.instanceID.deleteToken(${1:deleteTokenParams}, function () {});", chromeInstanceIDGetCreationTime: "chrome.instanceID.getCreationTime(function (${1:creationTime}) {\n\t$2\n});", chromeInstanceIDGetID: "chrome.instanceID.getID(function (${1:instanceID}) {\n\t$2\n});", chromeInstanceIDGetToken: "chrome.instanceID.getToken(${1:getTokenParams}, function (${2:token}) {\n\t$3\n});", chromeInstanceIDOnTokenRefresh: "chrome.instanceID.onTokenRefresh.addListener(function () {});" };
        const keywordsOfInputIme = { chromeInputImeClearComposition: "chrome.input.ime.clearComposition(${1:parameters}, function (${2:success}) {\n\t$3\n});", chromeInputImeCommitText: "chrome.input.ime.commitText(${1:parameters}, function (${2:success}) {\n\t$3\n});", chromeInputImeDeleteSurroundingText: "chrome.input.ime.deleteSurroundingText(${1:parameters}, function () {});", chromeInputImeHideInputView: "chrome.input.ime.hideInputView();", chromeInputImeKeyEventHandled: "chrome.input.ime.keyEventHandled(${1:requestId}, ${2:response});", chromeInputImeSendKeyEvents: "chrome.input.ime.sendKeyEvents(${1:parameters}, function () {});", chromeInputImeSetAssistiveWindowButtonHighlighted: "chrome.input.ime.setAssistiveWindowButtonHighlighted(${1:parameters}, function () {});", chromeInputImeSetAssistiveWindowProperties: "chrome.input.ime.setAssistiveWindowProperties(${1:parameters}, function (${2:success}) {\n\t$3\n});", chromeInputImeSetCandidates: "chrome.input.ime.setCandidates(${1:parameters}, function (${2:success}) {\n\t$3\n});", chromeInputImeSetCandidateWindowProperties: "chrome.input.ime.setCandidateWindowProperties(${1:parameters}, function (${2:success}) {\n\t$3\n});", chromeInputImeSetComposition: "chrome.input.ime.setComposition(${1:parameters}, function (${2:success}) {\n\t$3\n});", chromeInputImeSetCursorPosition: "chrome.input.ime.setCursorPosition(${1:parameters}, function (${2:success}) {\n\t$3\n});", chromeInputImeSetMenuItems: "chrome.input.ime.setMenuItems(${1:parameters}, function () {});", chromeInputImeUpdateMenuItems: "chrome.input.ime.updateMenuItems(${1:parameters}, function () {});", chromeInputImeOnActivate: "chrome.input.ime.onActivate.addListener(function (${1:engineID}, ${2:screen}) {\n\t$3\n});", chromeInputImeOnAssistiveWindowButtonClicked: "chrome.input.ime.onAssistiveWindowButtonClicked.addListener(function (${1:details}) {\n\t$2\n});", chromeInputImeOnBlur: "chrome.input.ime.onBlur.addListener(function (${1:contextID}) {\n\t$2\n});", chromeInputImeOnCandidateClicked: "chrome.input.ime.onCandidateClicked.addListener(function (${1:engineID}, ${2:candidateID}, ${3:button}) {\n\t$4\n});", chromeInputImeOnDeactivated: "chrome.input.ime.onDeactivated.addListener(function (${1:engineID}) {\n\t$2\n});", chromeInputImeOnFocus: "chrome.input.ime.onFocus.addListener(function (${1:context}) {\n\t$2\n});", chromeInputImeOnInputContextUpdate: "chrome.input.ime.onInputContextUpdate.addListener(function (${1:context}) {\n\t$2\n});", chromeInputImeOnKeyEvent: "chrome.input.ime.onKeyEvent.addListener(function () {});", chromeInputImeOnMenuItemActivated: "chrome.input.ime.onMenuItemActivated.addListener(function (${1:engineID}, ${2:name}) {\n\t$3\n});", chromeInputImeOnReset: "chrome.input.ime.onReset.addListener(function (${1:engineID}) {\n\t$2\n});", chromeInputImeOnSurroundingTextChanged: "chrome.input.ime.onSurroundingTextChanged.addListener(function (${1:engineID}, ${2:surroundingInfo}) {\n\t$3\n});" };
        const keywordsOfIdle = { chromeIdleGetAutoLockDelay: "chrome.idle.getAutoLockDelay(function (${1:delay}) {\n\t$2\n});", chromeIdleQueryState: "chrome.idle.queryState(${1:detectionIntervalInSeconds}, function (${2:newState}) {\n\t$3\n});", chromeIdleSetDetectionInterval: "chrome.idle.setDetectionInterval(${1:intervalInSeconds});", chromeIdleOnStateChanged: "chrome.idle.onStateChanged.addListener(function (${1:newState}) {\n\t$2\n});" };
        const keywordsOfI18n = { chromeI18nDetectLanguage: "chrome.i18n.detectLanguage(${1:text}, function (${2:result}) {\n\t$3\n});", chromeI18nGetAcceptLanguages: "chrome.i18n.getAcceptLanguages(function (${1:languages}) {\n\t$2\n});", chromeI18nGetMessage: "chrome.i18n.getMessage(${1:messageName}, ${2:substitutions}, ${3:options});", chromeI18nGetUILanguage: "chrome.i18n.getUILanguage();" };
        const keywordsOfGcm = { chromeGcmRegister: "chrome.gcm.register(${1:senderIds}, function (${2:registrationId}) {\n\t$3\n});", chromeGcmSend: "chrome.gcm.send(${1:message}, function (${2:messageId}) {\n\t$3\n});", chromeGcmUnregister: "chrome.gcm.unregister(function () {});", chromeGcmOnMessage: "chrome.gcm.onMessage.addListener(function (${1:message}) {\n\t$2\n});", chromeGcmOnMessagesDeleted: "chrome.gcm.onMessagesDeleted.addListener(function () {});", chromeGcmOnSendError: "chrome.gcm.onSendError.addListener(function (${1:error}) {\n\t$2\n});" };
        const keywordsOfFontSettings = { chromeFontSettingsClearDefaultFixedFontSize: "chrome.fontSettings.clearDefaultFixedFontSize(${1:details}, function () {});", chromeFontSettingsClearDefaultFontSize: "chrome.fontSettings.clearDefaultFontSize(${1:details}, function () {});", chromeFontSettingsClearFont: "chrome.fontSettings.clearFont(${1:details}, function () {});", chromeFontSettingsClearMinimumFontSize: "chrome.fontSettings.clearMinimumFontSize(${1:details}, function () {});", chromeFontSettingsGetDefaultFixedFontSize: "chrome.fontSettings.getDefaultFixedFontSize(${1:details}, function (${2:details}) {\n\t$3\n});", chromeFontSettingsGetDefaultFontSize: "chrome.fontSettings.getDefaultFontSize(${1:details}, function (${2:details}) {\n\t$3\n});", chromeFontSettingsGetFont: "chrome.fontSettings.getFont(${1:details}, function (${2:details}) {\n\t$3\n});", chromeFontSettingsGetFontList: "chrome.fontSettings.getFontList(function (${1:results}) {\n\t$2\n});", chromeFontSettingsGetMinimumFontSize: "chrome.fontSettings.getMinimumFontSize(${1:details}, function (${2:details}) {\n\t$3\n});", chromeFontSettingsSetDefaultFixedFontSize: "chrome.fontSettings.setDefaultFixedFontSize(${1:details}, function () {});", chromeFontSettingsSetDefaultFontSize: "chrome.fontSettings.setDefaultFontSize(${1:details}, function () {});", chromeFontSettingsSetFont: "chrome.fontSettings.setFont(${1:details}, function () {});", chromeFontSettingsSetMinimumFontSize: "chrome.fontSettings.setMinimumFontSize(${1:details}, function () {});", chromeFontSettingsOnDefaultFixedFontSizeChanged: "chrome.fontSettings.onDefaultFixedFontSizeChanged.addListener(function (${1:details}) {\n\t$2\n});", chromeFontSettingsOnDefaultFontSizeChanged: "chrome.fontSettings.onDefaultFontSizeChanged.addListener(function (${1:details}) {\n\t$2\n});", chromeFontSettingsOnFontChanged: "chrome.fontSettings.onFontChanged.addListener(function (${1:details}) {\n\t$2\n});", chromeFontSettingsOnMinimumFontSizeChanged: "chrome.fontSettings.onMinimumFontSizeChanged.addListener(function (${1:details}) {\n\t$2\n});" };
        const keywordsOfFileSystemProvider = { chromeFileSystemProviderGet: "chrome.fileSystemProvider.get(${1:fileSystemId}, function (${2:fileSystem}) {\n\t$3\n});", chromeFileSystemProviderGetAll: "chrome.fileSystemProvider.getAll(function (${1:fileSystems}) {\n\t$2\n});", chromeFileSystemProviderMount: "chrome.fileSystemProvider.mount(${1:options}, function () {});", chromeFileSystemProviderNotify: "chrome.fileSystemProvider.notify(${1:options}, function () {});", chromeFileSystemProviderUnmount: "chrome.fileSystemProvider.unmount(${1:options}, function () {});", chromeFileSystemProviderOnAbortRequested: "chrome.fileSystemProvider.onAbortRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnAddWatcherRequested: "chrome.fileSystemProvider.onAddWatcherRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnCloseFileRequested: "chrome.fileSystemProvider.onCloseFileRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnConfigureRequested: "chrome.fileSystemProvider.onConfigureRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnCopyEntryRequested: "chrome.fileSystemProvider.onCopyEntryRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnCreateDirectoryRequested: "chrome.fileSystemProvider.onCreateDirectoryRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnCreateFileRequested: "chrome.fileSystemProvider.onCreateFileRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnDeleteEntryRequested: "chrome.fileSystemProvider.onDeleteEntryRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnExecuteActionRequested: "chrome.fileSystemProvider.onExecuteActionRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnGetActionsRequested: "chrome.fileSystemProvider.onGetActionsRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnGetMetadataRequested: "chrome.fileSystemProvider.onGetMetadataRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnMountRequested: "chrome.fileSystemProvider.onMountRequested.addListener(function (${1:successCallback}, ${2:errorCallback}) {\n\t$3\n});", chromeFileSystemProviderOnMoveEntryRequested: "chrome.fileSystemProvider.onMoveEntryRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnOpenFileRequested: "chrome.fileSystemProvider.onOpenFileRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnReadDirectoryRequested: "chrome.fileSystemProvider.onReadDirectoryRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnReadFileRequested: "chrome.fileSystemProvider.onReadFileRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnRemoveWatcherRequested: "chrome.fileSystemProvider.onRemoveWatcherRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnTruncateRequested: "chrome.fileSystemProvider.onTruncateRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnUnmountRequested: "chrome.fileSystemProvider.onUnmountRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});", chromeFileSystemProviderOnWriteFileRequested: "chrome.fileSystemProvider.onWriteFileRequested.addListener(function (${1:options}, ${2:successCallback}, ${3:errorCallback}) {\n\t$4\n});" };
        const keywordsOfFileBrowserHandler = { chromeFileBrowserHandlerSelectFile: "chrome.fileBrowserHandler.selectFile(${1:selectionParams}, function (${2:result}) {\n\t$3\n});", chromeFileBrowserHandlerOnExecute: "chrome.fileBrowserHandler.onExecute.addListener(function (${1:id}, ${2:details}) {\n\t$3\n});" };
        const keywordsOfWindows = { chromeWindowsCreate: "chrome.windows.create(${1:createData}, function (${2:window}) {\n\t$3\n});", chromeWindowsGet: "chrome.windows.get(${1:windowId}, ${2:queryOptions}, function (${3:window}) {\n\t$4\n});", chromeWindowsGetAll: "chrome.windows.getAll(${1:queryOptions}, function (${2:windows}) {\n\t$3\n});", chromeWindowsGetCurrent: "chrome.windows.getCurrent(${1:queryOptions}, function (${2:window}) {\n\t$3\n});", chromeWindowsGetLastFocused: "chrome.windows.getLastFocused(${1:queryOptions}, function (${2:window}) {\n\t$3\n});", chromeWindowsRemove: "chrome.windows.remove(${1:windowId}, function () {});", chromeWindowsUpdate: "chrome.windows.update(${1:windowId}, ${2:updateInfo}, function (${3:window}) {\n\t$4\n});", chromeWindowsOnBoundsChanged: "chrome.windows.onBoundsChanged.addListener(function (${1:window}) {\n\t$2\n});", chromeWindowsOnCreated: "chrome.windows.onCreated.addListener(${1:callback}, ${2:filters}, );", chromeWindowsOnFocusChanged: "chrome.windows.onFocusChanged.addListener(${1:callback}, ${2:filters}, );", chromeWindowsOnRemoved: "chrome.windows.onRemoved.addListener(${1:callback}, ${2:filters}, );" }; 
        const keywordsOfWebRequest = { chromeWebRequestHandlerBehaviorChanged: "chrome.webRequest.handlerBehaviorChanged(function () {});", chromeWebRequestOnActionIgnored: "chrome.webRequest.onActionIgnored.addListener(function (${1:details}) {\n\t$2\n});", chromeWebRequestOnAuthRequired: "chrome.webRequest.onAuthRequired.addListener(${1:callback}, ${2:filter}, ${3:extraInfoSpec}, );", chromeWebRequestOnBeforeRedirect: "chrome.webRequest.onBeforeRedirect.addListener(${1:callback}, ${2:filter}, ${3:extraInfoSpec}, );", chromeWebRequestOnBeforeRequest: "chrome.webRequest.onBeforeRequest.addListener(${1:callback}, ${2:filter}, ${3:extraInfoSpec}, );", chromeWebRequestOnBeforeSendHeaders: "chrome.webRequest.onBeforeSendHeaders.addListener(${1:callback}, ${2:filter}, ${3:extraInfoSpec}, );", chromeWebRequestOnCompleted: "chrome.webRequest.onCompleted.addListener(${1:callback}, ${2:filter}, ${3:extraInfoSpec}, );", chromeWebRequestOnErrorOccurred: "chrome.webRequest.onErrorOccurred.addListener(${1:callback}, ${2:filter}, ${3:extraInfoSpec}, );", chromeWebRequestOnHeadersReceived: "chrome.webRequest.onHeadersReceived.addListener(${1:callback}, ${2:filter}, ${3:extraInfoSpec}, );", chromeWebRequestOnResponseStarted: "chrome.webRequest.onResponseStarted.addListener(${1:callback}, ${2:filter}, ${3:extraInfoSpec}, );", chromeWebRequestOnSendHeaders: "chrome.webRequest.onSendHeaders.addListener(${1:callback}, ${2:filter}, ${3:extraInfoSpec}, );" }; 
        const keywordsOfWebNavigation = { chromeWebNavigationGetAllFrames: "chrome.webNavigation.getAllFrames(${1:details}, function (${2:details}) {\n\t$3\n});", chromeWebNavigationGetFrame: "chrome.webNavigation.getFrame(${1:details}, function (${2:details}) {\n\t$3\n});", chromeWebNavigationOnBeforeNavigate: "chrome.webNavigation.onBeforeNavigate.addListener(${1:callback}, ${2:filters}, );", chromeWebNavigationOnCommitted: "chrome.webNavigation.onCommitted.addListener(${1:callback}, ${2:filters}, );", chromeWebNavigationOnCompleted: "chrome.webNavigation.onCompleted.addListener(${1:callback}, ${2:filters}, );", chromeWebNavigationOnCreatedNavigationTarget: "chrome.webNavigation.onCreatedNavigationTarget.addListener(${1:callback}, ${2:filters}, );", chromeWebNavigationOnDOMContentLoaded: "chrome.webNavigation.onDOMContentLoaded.addListener(${1:callback}, ${2:filters}, );", chromeWebNavigationOnErrorOccurred: "chrome.webNavigation.onErrorOccurred.addListener(${1:callback}, ${2:filters}, );", chromeWebNavigationOnHistoryStateUpdated: "chrome.webNavigation.onHistoryStateUpdated.addListener(${1:callback}, ${2:filters}, );", chromeWebNavigationOnReferenceFragmentUpdated: "chrome.webNavigation.onReferenceFragmentUpdated.addListener(${1:callback}, ${2:filters}, );", chromeWebNavigationOnTabReplaced: "chrome.webNavigation.onTabReplaced.addListener(function (${1:details}) {\n\t$2\n});" }; 
        const keywordsOfWallpaper = { chromeWallpaperSetWallpaper: "chrome.wallpaper.setWallpaper(${1:details}, function (${2:thumbnail}) {\n\t$3\n});" }; 
        const keywordsOfVpnProvider = { chromeVpnProviderCreateConfig: "chrome.vpnProvider.createConfig(${1:name}, function (${2:id}) {\n\t$3\n});", chromeVpnProviderDestroyConfig: "chrome.vpnProvider.destroyConfig(${1:id}, function () {});", chromeVpnProviderNotifyConnectionStateChanged: "chrome.vpnProvider.notifyConnectionStateChanged(${1:state}, function () {});", chromeVpnProviderSendPacket: "chrome.vpnProvider.sendPacket(${1:data}, function () {});", chromeVpnProviderSetParameters: "chrome.vpnProvider.setParameters(${1:parameters}, function () {});", chromeVpnProviderOnConfigCreated: "chrome.vpnProvider.onConfigCreated.addListener(function (${1:id}, ${2:name}, ${3:data}) {\n\t$4\n});", chromeVpnProviderOnConfigRemoved: "chrome.vpnProvider.onConfigRemoved.addListener(function (${1:id}) {\n\t$2\n});", chromeVpnProviderOnPacketReceived: "chrome.vpnProvider.onPacketReceived.addListener(function (${1:data}) {\n\t$2\n});", chromeVpnProviderOnPlatformMessage: "chrome.vpnProvider.onPlatformMessage.addListener(function (${1:id}, ${2:message}, ${3:error}) {\n\t$4\n});", chromeVpnProviderOnUIEvent: "chrome.vpnProvider.onUIEvent.addListener(function (${1:event}, ${2:id}) {\n\t$3\n});" }; 
        const keywordsOfTtsEngine = { chromeTtsEngineUpdateVoices: "chrome.ttsEngine.updateVoices(${1:voices});", chromeTtsEngineOnPause: "chrome.ttsEngine.onPause.addListener(function () {});", chromeTtsEngineOnResume: "chrome.ttsEngine.onResume.addListener(function () {});", chromeTtsEngineOnSpeak: "chrome.ttsEngine.onSpeak.addListener(function (${1:utterance}, ${2:options}, ${3:sendTtsEvent}) {\n\t$4\n});", chromeTtsEngineOnSpeakWithAudioStream: "chrome.ttsEngine.onSpeakWithAudioStream.addListener(function (${1:utterance}, ${2:options}, ${3:audioStreamOptions}, ${4:sendTtsAudio}, ${5:sendError}) {\n\t$6\n});", chromeTtsEngineOnStop: "chrome.ttsEngine.onStop.addListener(function () {});" }; 
        const keywordsOfTts = { chromeTtsGetVoices: "chrome.tts.getVoices(function (${1:voices}) {\n\t$2\n});", chromeTtsIsSpeaking: "chrome.tts.isSpeaking(function (${1:speaking}) {\n\t$2\n});", chromeTtsPause: "chrome.tts.pause();", chromeTtsResume: "chrome.tts.resume();", chromeTtsSpeak: "chrome.tts.speak(${1:utterance}, ${2:options}, function () {});", chromeTtsStop: "chrome.tts.stop();" }; 
        const keywordsOfTopSites = { chromeTopSitesGet: "chrome.topSites.get(function (${1:data}) {\n\t$2\n});" }; 
        const keywordsOfTabGroups = { chromeTabGroupsGet: "chrome.tabGroups.get(${1:groupId}, function (${2:group}) {\n\t$3\n});", chromeTabGroupsMove: "chrome.tabGroups.move(${1:groupId}, ${2:moveProperties}, function (${3:group}) {\n\t$4\n});", chromeTabGroupsQuery: "chrome.tabGroups.query(${1:queryInfo}, function (${2:result}) {\n\t$3\n});", chromeTabGroupsUpdate: "chrome.tabGroups.update(${1:groupId}, ${2:updateProperties}, function (${3:group}) {\n\t$4\n});", chromeTabGroupsOnCreated: "chrome.tabGroups.onCreated.addListener(function (${1:group}) {\n\t$2\n});", chromeTabGroupsOnMoved: "chrome.tabGroups.onMoved.addListener(function (${1:group}) {\n\t$2\n});", chromeTabGroupsOnRemoved: "chrome.tabGroups.onRemoved.addListener(function (${1:group}) {\n\t$2\n});", chromeTabGroupsOnUpdated: "chrome.tabGroups.onUpdated.addListener(function (${1:group}) {\n\t$2\n});" }; 
        const keywordsOfTabCapture = { chromeTabCaptureCapture: "chrome.tabCapture.capture(${1:options}, function (${2:stream}) {\n\t$3\n});", chromeTabCaptureGetCapturedTabs: "chrome.tabCapture.getCapturedTabs(function (${1:result}) {\n\t$2\n});", chromeTabCaptureGetMediaStreamId: "chrome.tabCapture.getMediaStreamId(${1:options}, function (${2:streamId}) {\n\t$3\n});", chromeTabCaptureOnStatusChanged: "chrome.tabCapture.onStatusChanged.addListener(function (${1:info}) {\n\t$2\n});" }; 
        const keywordsOfSystemStorage = { chromeSystemStorageEjectDevice: "chrome.system.storage.ejectDevice(${1:id}, function (${2:result}) {\n\t$3\n});", chromeSystemStorageGetAvailableCapacity: "chrome.system.storage.getAvailableCapacity(${1:id}, function (${2:info}) {\n\t$3\n});", chromeSystemStorageGetInfo: "chrome.system.storage.getInfo(function (${1:info}) {\n\t$2\n});", chromeSystemStorageOnAttached: "chrome.system.storage.onAttached.addListener(function (${1:info}) {\n\t$2\n});", chromeSystemStorageOnDetached: "chrome.system.storage.onDetached.addListener(function (${1:id}) {\n\t$2\n});" }; 
        const keywordsOfSystemMemory = { chromeSystemMemoryGetInfo: "chrome.system.memory.getInfo(function (${1:info}) {\n\t$2\n});" }; 
        const keywordsOfSystemDisplay = { chromeSystemDisplayClearTouchCalibration: "chrome.system.display.clearTouchCalibration(${1:id});", chromeSystemDisplayCompleteCustomTouchCalibration: "chrome.system.display.completeCustomTouchCalibration(${1:pairs}, ${2:bounds});", chromeSystemDisplayEnableUnifiedDesktop: "chrome.system.display.enableUnifiedDesktop(${1:enabled});", chromeSystemDisplayGetDisplayLayout: "chrome.system.display.getDisplayLayout(function (${1:layouts}) {\n\t$2\n});", chromeSystemDisplayGetInfo: "chrome.system.display.getInfo(${1:flags}, function (${2:displayInfo}) {\n\t$3\n});", chromeSystemDisplayOverscanCalibrationAdjust: "chrome.system.display.overscanCalibrationAdjust(${1:id}, ${2:delta});", chromeSystemDisplayOverscanCalibrationComplete: "chrome.system.display.overscanCalibrationComplete(${1:id});", chromeSystemDisplayOverscanCalibrationReset: "chrome.system.display.overscanCalibrationReset(${1:id});", chromeSystemDisplayOverscanCalibrationStart: "chrome.system.display.overscanCalibrationStart(${1:id});", chromeSystemDisplaySetDisplayLayout: "chrome.system.display.setDisplayLayout(${1:layouts}, function () {});", chromeSystemDisplaySetDisplayProperties: "chrome.system.display.setDisplayProperties(${1:id}, ${2:info}, function () {});", chromeSystemDisplaySetMirrorMode: "chrome.system.display.setMirrorMode(${1:info}, function () {});", chromeSystemDisplayShowNativeTouchCalibration: "chrome.system.display.showNativeTouchCalibration(${1:id}, function (${2:success}) {\n\t$3\n});", chromeSystemDisplayStartCustomTouchCalibration: "chrome.system.display.startCustomTouchCalibration(${1:id});", chromeSystemDisplayOnDisplayChanged: "chrome.system.display.onDisplayChanged.addListener(function () {});" }; 
        const keywordsOfSystemCpu = { chromeSystemCpuGetInfo: "chrome.system.cpu.getInfo(function (${1:info}) {\n\t$2\n});" }; 
        const keywordsOfSearch = { chromeSearchQuery: "chrome.search.query(${1:queryInfo}, function () {});"  }; 
        const keywordsOfProxy = { chromeProxyOnProxyError: "chrome.proxy.onProxyError.addListener(function (${1:details}) {\n\t$2\n});" }; 
        const keywordsOfPrintingMetrics = { chromePrintingMetricsGetPrintJobs: "chrome.printingMetrics.getPrintJobs(function (${1:jobs}) {\n\t$2\n});", chromePrintingMetricsOnPrintJobFinished: "chrome.printingMetrics.onPrintJobFinished.addListener(function (${1:jobInfo}) {\n\t$2\n});" }; 
        const keywordsOfPrinting = { chromePrintingCancelJob: "chrome.printing.cancelJob(${1:jobId}, function () {});", chromePrintingGetPrinterInfo: "chrome.printing.getPrinterInfo(${1:printerId}, function (${2:response}) {\n\t$3\n});", chromePrintingGetPrinters: "chrome.printing.getPrinters(function (${1:printers}) {\n\t$2\n});", chromePrintingSubmitJob: "chrome.printing.submitJob(${1:request}, function (${2:response}) {\n\t$3\n});", chromePrintingOnJobStatusChanged: "chrome.printing.onJobStatusChanged.addListener(function (${1:jobId}, ${2:status}) {\n\t$3\n});" }; 
        makeSnippets("Runtime", keywordsOfRuntime, this.completionItems);
        makeSnippets("Tabs", keywordsOfTabs, this.completionItems);
        makeSnippets("Storage", keywordsOfStorage, this.completionItems);
        makeSnippets("BrowserAction", keywordsOfBrowserAction, this.completionItems);
        makeSnippets("ContextMenus", keywordsOfContextMenus, this.completionItems);
        makeSnippets("Action", keywordsOfAction, this.completionItems);
        makeSnippets("History", keywordsOfHistory, this.completionItems);
        makeSnippets("Notifications", keywordsOfNotifications, this.completionItems);
        makeSnippets("PageAction", keywordsOfPageAction, this.completionItems);        
        makeSnippets("Scripting", keywordsOfScripting, this.completionItems);        
        makeSnippets("Bookmarks", keywordsOfBookmarks, this.completionItems);        
        makeSnippets("Commands", keywordsOfCommands, this.completionItems);        
        makeSnippets("Cookies", keywordsOfCookies, this.completionItems);        
        makeSnippets("Debugger", keywordsOfDebugger, this.completionItems);        
        makeSnippets("Sessions", keywordsOfSessions, this.completionItems);        
        makeSnippets("DesktopCapture", keywordsOfDesktopCapture, this.completionItems);        
        makeSnippets("BrowsingData", keywordsOfBrowsingData, this.completionItems);        
        makeSnippets("CertificateProvider", keywordsOfCertificateProvider, this.completionItems);        
        makeSnippets("Alarms", keywordsOfAlarms, this.completionItems);        
        makeSnippets("Audio", keywordsOfAudio, this.completionItems);        
        makeSnippets("Downloads", keywordsOfDownloads, this.completionItems);        
        makeSnippets("Extension", keywordsOfExtension, this.completionItems);        
        makeSnippets("Identity", keywordsOfIdentity, this.completionItems);        
        makeSnippets("DevetoolsNetworks", keywordsOfDevetoolsNetworks, this.completionItems);        
        makeSnippets("DeclarativeNetRequest", keywordsOfDeclarativeNetRequest, this.completionItems);        
        makeSnippets("DevtoolsInspectedWindow", keywordsOfDevtoolsInspectedWindow, this.completionItems);        
        makeSnippets("DevtoolsPanels", keywordsOfDevtoolsPanels, this.completionItems);        
        makeSnippets("DevetoolsRecorder", keywordsOfDevetoolsRecorder, this.completionItems);        
        makeSnippets("DeclartiveNetRequest", keywordsOfDeclartiveNetRequest, this.completionItems);        
        makeSnippets("DocumentScan", keywordsOfDocumentScan, this.completionItems);        
        makeSnippets("Dom", keywordsOfDom, this.completionItems);        
        makeSnippets("EnterpriseDeviceAttributes", keywordsOfEnterpriseDeviceAttributes, this.completionItems);        
        makeSnippets("EnterpriseHardwarePlatform", keywordsOfEnterpriseHardwarePlatform, this.completionItems);        
        makeSnippets("EnterpriseNetworkingAttributes", keywordsOfEnterpriseNetworkingAttributes, this.completionItems);        
        makeSnippets("EnterprisePlatformKeys", keywordsOfEnterprisePlatformKeys, this.completionItems);        
        makeSnippets("PrinterProvider", keywordsOfPrinterProvider, this.completionItems);        
        makeSnippets("Power", keywordsOfPower, this.completionItems);        
        makeSnippets("PlatformKeys", keywordsOfPlatformKeys, this.completionItems);        
        makeSnippets("permissions", keywordsOfpermissions, this.completionItems);        
        makeSnippets("PageCapture", keywordsOfPageCapture, this.completionItems);        
        makeSnippets("Omnibox", keywordsOfOmnibox, this.completionItems);        
        makeSnippets("Offscreen", keywordsOfOffscreen, this.completionItems);        
        makeSnippets("Management", keywordsOfManagement, this.completionItems);        
        makeSnippets("LoginState", keywordsOfLoginState, this.completionItems);        
        makeSnippets("InstanceID", keywordsOfInstanceID, this.completionItems);        
        makeSnippets("InputIme", keywordsOfInputIme, this.completionItems);        
        makeSnippets("Idle", keywordsOfIdle, this.completionItems);        
        makeSnippets("I18n", keywordsOfI18n, this.completionItems);        
        makeSnippets("Gcm", keywordsOfGcm, this.completionItems);        
        makeSnippets("FontSettings", keywordsOfFontSettings, this.completionItems);        
        makeSnippets("FileSystemProvider", keywordsOfFileSystemProvider, this.completionItems);        
        makeSnippets("FileBrowserHandler", keywordsOfFileBrowserHandler, this.completionItems);        
        makeSnippets("Windows", keywordsOfWindows, this.completionItems);        
        makeSnippets("WebRequest", keywordsOfWebRequest, this.completionItems);        
        makeSnippets("WebNavigation", keywordsOfWebNavigation, this.completionItems);        
        makeSnippets("Wallpaper", keywordsOfWallpaper, this.completionItems);        
        makeSnippets("VpnProvider", keywordsOfVpnProvider, this.completionItems);        
        makeSnippets("TtsEngine", keywordsOfTtsEngine, this.completionItems);        
        makeSnippets("Tts", keywordsOfTts, this.completionItems);        
        makeSnippets("TopSites", keywordsOfTopSites, this.completionItems);        
        makeSnippets("TabGroups", keywordsOfTabGroups, this.completionItems);        
        makeSnippets("TabCapture", keywordsOfTabCapture, this.completionItems);        
        makeSnippets("SystemStorage", keywordsOfSystemStorage, this.completionItems);        
        makeSnippets("SystemMemory", keywordsOfSystemMemory, this.completionItems);        
        makeSnippets("SystemDisplay", keywordsOfSystemDisplay, this.completionItems);        
        makeSnippets("SystemCpu", keywordsOfSystemCpu, this.completionItems);        
        makeSnippets("Search", keywordsOfSearch, this.completionItems);        
        makeSnippets("Proxy", keywordsOfProxy, this.completionItems);        
        makeSnippets("PrintingMetrics", keywordsOfPrintingMetrics, this.completionItems);        
        makeSnippets("Printing", keywordsOfPrinting, this.completionItems);        
        this.completionList = new vscode.CompletionList(this.completionItems, false);
    }

    provideCompletionItems(document, position, token) {
        return Promise.resolve(this.completionList);
    }
}
function activate(context) {
    context.subscriptions.push(
        vscode.languages.registerCompletionItemProvider(
            { scheme: 'file', language: 'javascript' },
            new JsCompletionItemProvider(),
            '.'
        )
    );
}

function deactivate() { }

module.exports = {
    activate,
    deactivate
}
