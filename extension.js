const vscode = require('vscode');

function makeSnippets(apiName, keywords, items) {
    for (let key in keywords) {
        const template = {
            label: key,
            insertText: new vscode.SnippetString(keywords[key]),
            kind: null,
            documentation: null,
            detail: ''
        }
        let urlWord = key.replace("chrome", "").replace(apiName, "");
        urlWord = urlWord[0].toLowerCase() + urlWord.replace(urlWord[0], "");
        if (key.indexOf("On") == -1) {
            template.kind = vscode.CompletionItemKind.Method;
            template.documentation = new vscode.MarkdownString("https://developer.chrome.com/docs/extensions/reference/" + apiName.toLowerCase() + "/#method-" + urlWord);
            items.push(template);
        } else {
            template.kind = vscode.CompletionItemKind.Event;
            template.documentation = new vscode.MarkdownString("https://developer.chrome.com/docs/extensions/reference/" + apiName.toLowerCase() + "/#event-" + urlWord);
            items.push(template);
        }
    }
}

class JsCompletionItemProvider {
    constructor() {
        this.completionItems = [];
        const keywordsOfRuntime = { chromeRuntimeOnUpdateAvailable: "chrome.runtime.onUpdateAvailable.addListener(function (${1:details}) {\n\t$2\n});", chromeRuntimeOnSuspendCanceled: "chrome.runtime.onSuspendCanceled.addListener(function () {\n\t$1\n});", chromeRuntimeOnSuspend: "chrome.runtime.onSuspend.addListener(function () {\n\t$1\n});", chromeRuntimeOnStartup: "chrome.runtime.onStartup.addListener(function () {\n\t$1\n});", chromeRuntimeOnRestartRequired: "chrome.runtime.onRestartRequired.addListener(function (${1:reason}) {\n\t$2\n})", chromeRuntimeOnMessageExternal: "chrome.runtime.onMessageExternal.addListener(function (${1:message}, ${2:sender}, ${3:sendResponse}) {\n\t$4\n})", chromeRuntimeOnInstalled: "chrome.runtime.onInstalled.addListener(function (${1:details}) {\n\t$2\n});", chromeRuntimeOnConnectNative: "chrome.runtime.onConnectNative.addListener(function (${1:port}) {\n\t$2\n});", chromeRuntimeOnConnectExternal: "chrome.runtime.onConnectExternal.addListener(function (${1:port}) {\n\t$2\n});", chromeRuntimeOnConnect: "chrome.runtime.onConnect.addListener(function (${1:port}) {\n\t$2\n})", chromeRuntimeSetUninstallURL: "chrome.runtime.setUninstallURL(${1:url}, function () {});", chromeRuntimeNativeMessage: "chrome.runtime.sendNativeMessage(${1:application}, ${2:message}, function (${3:response}) {\n\t$4\n):", chromeRuntimeRestartAfterDelay: "chrome.runtime.restartAfterDelay(${1:seconds}, function () {});", chromeRuntimeRestart: "chrome.runtime.restart();", chromeRuntimeReload: "chrome.runtime.reload()", chromeRuntimeOpenOptionsPage: "chrome.runtime.openOptionsPage(function (${1:lastError}) {\n\t$2\n});", chromeRuntimeGetPlatformInfo: "chrome.runtime.getPlatformInfo(function (${1:platformInfo}) {\n\t$2\n})", chromeRuntimeGetPackageDirectoryEntry: "chrome.runtime.getPackageDirectoryEntry(function (${1:directoryEntry}) {\n\t$2\n})", chromeRuntimeGetManifest: "chrome.runtime.getManifest();", chromeRuntimeGetBackgroundPage: "chrome.runtime.getBackgroundPage(function (${1: window}) {\n\t$2\n});", chromeRuntimeConnectNative: "chrome.runtime.connectNative(${1:application});", chromeRuntimeConnect: "chrome.runtime.connect(${1:extensionId}, ${2:connectInfo});", chromeRuntimeSendMessage: "chrome.runtime.sendMessage({$1}, function (${2:response}) {\n\t$3\n});", chromeRuntimeOnMessage: "chrome.runtime.onMessage.addListener(function(${1:request}, ${2:sender}, ${3:sendResponse}) {\n\t$4\n});", chromeRuntimeGetURL: "chrome.runtime.getURL($1);" };
        const keywordsOfStorage = { chromeStorageLocalSet: "chrome.storage.local.set({$1}, function () {});", chromeStorageSyncSet: "chrome.storage.sync.set({$1}, function () {});", chromeStorageLocalGet: "chrome.storage.local.get([$1], function (${2:result}) {\n\t$3\n});", chromeStorageSyncGet: "chrome.storage.sync.get([$1], function (${2:result}) {\n\t$3\n});" };
        const keywordsOfBrowserAction = { chromeBrowserActionDisable: "chrome.browserAction.disable(${1:tabId}, function () {});", chromeBrowserActionEnable: "chrome.browserAction.enable(${1:tabId}, function () {});", chromeBrowserActionGetBadgeBackgroundColor: "chrome.browserAction.getBadgeBackgroundColor(${1:details}, function (${2:result}) {\n\t$3\n});", chromeBrowserActionGetBadgeText: "chrome.browserAction.getBadgeText(${1:details}, function (${2:result}) {\n\t$3\n});", chromeBrowserActionGetPopup: "chrome.browserAction.getPopup(${1:details}, function (${2:result}) {\n\t$3\n});", chromeBrowserActionGetTitle: "chrome.browserAction.getTitle(${1:details}, function (${2:result}) {\n\t$3\n});", chromeBrowserActionSetBadgeBackgroundColor: "chrome.browserAction.setBadgeBackgroundColor(${1:details}, function () {});", chromeBrowserActionSetBadgeText: "chrome.browserAction.setBadgeText(${1:details}, function () {});", chromeBrowserActionSetIcon: "chrome.browserAction.setIcon(${1:details}, function () {});", chromeBrowserActionSetPopup: "chrome.browserAction.setPopup(${1:details}, function () {});", chromeBrowserActionSetTitle: "chrome.browserAction.setTitle(${1:details}, function () {});", chromeBrowserActionOnClicked: "chrome.browserAction.onClicked.addListener(function (${1:tab}) {\n\t$2\n});" }
        const keywordsOfContextMenus = { chromeContextMenusOnClicked: "chrome.contextMenus.onClicked.addListener(function (${1:info}, ${2:tab}) {\n\t$3\n});", chromeContextMenusUpdate: "chrome.contextMenus.update(${1:id}, ${2:updateProperties}, function () {});", chromeContextMenusRemoveAll: "chrome.contextMenus.removeAll(function () {});", chromeContextMenusRemove: "chrome.contextMenus.remove(${1:menuItemId}, function () {});", chromeContextMenusCreate: "chrome.contextMenus.create(${1:createProperties}, function () {});",  };
        const keywordsOfTabs = { chromeTabsCaptureVisibleTab: "chrome.tabs.captureVisibleTab(${1:windowId}, ${2:options}, function (${3:dataUrl}) {\n\t$4\n});", chromeTabsConnect: "chrome.tabs.connect(${1:tabId}, ${2:connectInfo});", chromeTabsCreate: "chrome.tabs.create(${1:createProperties}, function (${2:tab}) {\n\t$3\n});", chromeTabsDetectLanguage: "chrome.tabs.detectLanguage(${1:tabId}, function (${2:language}) {\n\t$3\n});", chromeTabsDiscard: "chrome.tabs.discard(${1:tabId}, function (${2:tab}) {\n\t$3\n});", chromeTabsDuplicate: "chrome.tabs.duplicate(${1:tabId}, function (${2:tab}) {\n\t$3\n});", chromeTabsExecuteScript: "chrome.tabs.executeScript(${1:tabId}, ${2:details}, function (${3:result}) {\n\t$4\n});", chromeTabsGet: "chrome.tabs.get(${1:tabId}, function (${2:tab}) {\n\t$3\n});", chromeTabsGetAllInWindow: "chrome.tabs.getAllInWindow(${1:windowId}, function (${2:tabs}) {\n\t$3\n});", chromeTabsGetCurrent: "chrome.tabs.getCurrent(function (${1:tab}) {\n\t$2\n});", chromeTabsGetSelected: "chrome.tabs.getSelected(${1:windowId}, function (${2:tab}) {\n\t$3\n});", chromeTabsGetZoom: "chrome.tabs.getZoom(${1:tabId}, function (${2:zoomFactor}) {\n\t$3\n});", chromeTabsGetZoomSettings: "chrome.tabs.getZoomSettings(${1:tabId}, function (${2:zoomSettings}) {\n\t$3\n});", chromeTabsGoBack: "chrome.tabs.goBack(${1:tabId}, function () {});", chromeTabsGoForward: "chrome.tabs.goForward(${1:tabId}, function () {});", chromeTabsGroup: "chrome.tabs.group(${1:options}, function (${2:groupId}) {\n\t$3\n});", chromeTabsHighlight: "chrome.tabs.highlight(${1:highlightInfo}, function (${2:window}) {\n\t$3\n});", chromeTabsInsertCSS: "chrome.tabs.insertCSS(${1:tabId}, ${2:details}, function () {});", chromeTabsMove: "chrome.tabs.move(${1:tabIds}, ${2:moveProperties}, function (${3:tabs}) {\n\t$4\n});", chromeTabsQuery: "chrome.tabs.query(${1:queryInfo}, function (${2:result}) {\n\t$3\n});", chromeTabsReload: "chrome.tabs.reload(${1:tabId}, ${2:reloadProperties}, function () {});", chromeTabsRemove: "chrome.tabs.remove(${1:tabIds}, function () {});", chromeTabsRemoveCSS: "chrome.tabs.removeCSS(${1:tabId}, ${2:details}, function () {});", chromeTabsSendMessage: "chrome.tabs.sendMessage(${1:tabId}, ${2:message}, ${3:options}, function (${4:response}) {\n\t$5\n});", chromeTabsSendRequest: "chrome.tabs.sendRequest(${1:tabId}, ${2:request}, function (${3:response}) {\n\t$4\n});", chromeTabsSetZoom: "chrome.tabs.setZoom(${1:tabId}, ${2:zoomFactor}, function () {});", chromeTabsSetZoomSettings: "chrome.tabs.setZoomSettings(${1:tabId}, ${2:zoomSettings}, function () {});", chromeTabsUngroup: "chrome.tabs.ungroup(${1:tabIds}, function () {});", chromeTabsUpdate: "chrome.tabs.update(${1:tabId}, ${2:updateProperties}, function (${3:tab}) {\n\t$4\n});", chromeTabsOnActivated: "chrome.tabs.onActivated.addListener(function (${1:activeInfo}) {\n\t$2\n});", chromeTabsOnActiveChanged: "chrome.tabs.onActiveChanged.addListener(function (${1:tabId}, ${2:selectInfo}) {\n\t$3\n});", chromeTabsOnAttached: "chrome.tabs.onAttached.addListener(function (${1:tabId}, ${2:attachInfo}) {\n\t$3\n});", chromeTabsOnCreated: "chrome.tabs.onCreated.addListener(function (${1:tab}) {\n\t$2\n});", chromeTabsOnDetached: "chrome.tabs.onDetached.addListener(function (${1:tabId}, ${2:detachInfo}) {\n\t$3\n});", chromeTabsOnHighlightChanged: "chrome.tabs.onHighlightChanged.addListener(function (${1:selectInfo}) {\n\t$2\n});", chromeTabsOnHighlighted: "chrome.tabs.onHighlighted.addListener(function (${1:highlightInfo}) {\n\t$2\n});", chromeTabsOnMoved: "chrome.tabs.onMoved.addListener(function (${1:tabId}, ${2:moveInfo}) {\n\t$3\n});", chromeTabsOnRemoved: "chrome.tabs.onRemoved.addListener(function (${1:tabId}, ${2:removeInfo}) {\n\t$3\n});", chromeTabsOnReplaced: "chrome.tabs.onReplaced.addListener(function (${1:addedTabId}, ${2:removedTabId}) {\n\t$3\n});", chromeTabsOnSelectionChanged: "chrome.tabs.onSelectionChanged.addListener(function (${1:tabId}, ${2:selectInfo}) {\n\t$3\n});", chromeTabsOnUpdated: "chrome.tabs.onUpdated.addListener(function (${1:tabId}, ${2:changeInfo}, ${3:tab}) {\n\t$4\n});", chromeTabsOnZoomChange: "chrome.tabs.onZoomChange.addListener(function (${1:ZoomChangeInfo}) {\n\t$2\n});" }
        const keywordsOfAction = { chromeActionDisable: "chrome.action.disable(${1:tabId}, function () {});", chromeActionEnable: "chrome.action.enable(${1:tabId}, function () {});", chromeActionGetBadgeBackgroundColor: "chrome.action.getBadgeBackgroundColor(${1:details}, function (${2:result}) {\n\t$3\n});", chromeActionGetBadgeText: "chrome.action.getBadgeText(${1:details}, function (${2:result}) {\n\t$3\n});", chromeActionGetBadgeTextColor: "chrome.action.getBadgeTextColor(${1:details}, function (${2:result}) {\n\t$3\n});", chromeActionGetPopup: "chrome.action.getPopup(${1:details}, function (${2:result}) {\n\t$3\n});", chromeActionGetTitle: "chrome.action.getTitle(${1:details}, function (${2:result}) {\n\t$3\n});", chromeActionGetUserSettings: "chrome.action.getUserSettings(function (${1:userSettings}) {\n\t$2\n});", chromeActionIsEnabled: "chrome.action.isEnabled(${1:tabId}, function (${2:isEnabled}) {\n\t$3\n});", chromeActionOpenPopup: "chrome.action.openPopup(${1:options}, function () {});", chromeActionSetBadgeBackgroundColor: "chrome.action.setBadgeBackgroundColor(${1:details}, function () {});", chromeActionSetBadgeText: "chrome.action.setBadgeText(${1:details}, function () {});", chromeActionSetBadgeTextColor: "chrome.action.setBadgeTextColor(${1:details}, function () {});", chromeActionSetIcon: "chrome.action.setIcon(${1:details}, function () {});", chromeActionSetPopup: "chrome.action.setPopup(${1:details}, function () {});", chromeActionSetTitle: "chrome.action.setTitle(${1:details}, function () {});", chromeActionOnClicked: "chrome.action.onClicked.addListener(function (${1:tab}) {\n\t$2\n});" }
        const keywordsOfHistory = { chromeHistoryAddUrl: "chrome.history.addUrl(${1:details}, function () {});", chromeHistoryDeleteAll: "chrome.history.deleteAll(function () {});", chromeHistoryDeleteRange: "chrome.history.deleteRange(${1:range}, function () {});", chromeHistoryDeleteUrl: "chrome.history.deleteUrl(${1:details}, function () {});", chromeHistoryGetVisits: "chrome.history.getVisits(${1:details}, function (${2:results}) {\n\t$3\n});", chromeHistorySearch: "chrome.history.search(${1:query}, function (${2:results}) {\n\t$3\n});", chromeHistoryOnVisited: "chrome.history.onVisited.addListener(function (${1:result}) {\n\t$2\n});", chromeHistoryOnVisitRemoved: "chrome.history.onVisitRemoved.addListener(function (${1:removed}) {\n\t$2\n});" }
        const keywordsOfNotifications = { chromeNotificationsClear: "chrome.notifications.clear(${1:notificationId}, function (${2:wasCleared}) {\n\t$3\n});", chromeNotificationsCreate: "chrome.notifications.create(${1:notificationId}, ${2:options}, function (${3:notificationId}) {\n\t$4\n});", chromeNotificationsGetAll: "chrome.notifications.getAll(function (${1:notifications}) {\n\t$2\n});", chromeNotificationsGetPermissionLevel: "chrome.notifications.getPermissionLevel(function (${1:level}) {\n\t$2\n});", chromeNotificationsUpdate: "chrome.notifications.update(${1:notificationId}, ${2:options}, function (${3:wasUpdated}) {\n\t$4\n});", chromeNotificationsOnButtonClicked: "chrome.notifications.onButtonClicked.addListener(function (${1:notificationId}, ${2:buttonIndex}) {\n\t$3\n});", chromeNotificationsOnClicked: "chrome.notifications.onClicked.addListener(function (${1:notificationId}) {\n\t$2\n});", chromeNotificationsOnClosed: "chrome.notifications.onClosed.addListener(function (${1:notificationId}, ${2:byUser}) {\n\t$3\n});", chromeNotificationsOnPermissionLevelChanged: "chrome.notifications.onPermissionLevelChanged.addListener(function (${1:level}) {\n\t$2\n});", chromeNotificationsOnShowSettings: "chrome.notifications.onShowSettings.addListener(function () {});" }
        const keywordsOfPageAction = { chromePageActionGetPopup: "chrome.pageAction.getPopup(${1:details}, function (${2:result}) {\n\t$3\n});", chromePageActionGetTitle: "chrome.pageAction.getTitle(${1:details}, function (${2:result}) {\n\t$3\n});", chromePageActionHide: "chrome.pageAction.hide(${1:tabId}, function () {});", chromePageActionSetIcon: "chrome.pageAction.setIcon(${1:details}, function () {});", chromePageActionSetPopup: "chrome.pageAction.setPopup(${1:details}, function () {});", chromePageActionSetTitle: "chrome.pageAction.setTitle(${1:details}, function () {});", chromePageActionShow: "chrome.pageAction.show(${1:tabId}, function () {});", chromePageActionOnClicked: "chrome.pageAction.onClicked.addListener(function (${1:tab}) {\n\t$2\n});" }
        makeSnippets("Runtime", keywordsOfRuntime, this.completionItems);
        makeSnippets("Tabs", keywordsOfTabs, this.completionItems);
        makeSnippets("Storage", keywordsOfStorage, this.completionItems);
        makeSnippets("BrowserAction", keywordsOfBrowserAction, this.completionItems);
        makeSnippets("ContextMenus", keywordsOfContextMenus, this.completionItems);
        makeSnippets("Action", keywordsOfAction, this.completionItems);
        makeSnippets("History", keywordsOfHistory, this.completionItems);
        makeSnippets("Notifications", keywordsOfNotifications, this.completionItems);
        makeSnippets("PageAction", keywordsOfPageAction, this.completionItems);        
        this.completionList = new vscode.CompletionList(this.completionItems, false);
    }

    provideCompletionItems(document, position, token) {
        return Promise.resolve(this.completionList);
    }
}
function activate(context) {
    context.subscriptions.push(
        vscode.languages.registerCompletionItemProvider(
            { scheme: 'file', language: 'javascript' },
            new JsCompletionItemProvider(),
            '.'
        )
    );
}

function deactivate() { }

module.exports = {
    activate,
    deactivate
}
